
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import os
import sys
import threading


sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pathlib import Path

from SocketTest.client import ClientListener 
from tkinter import Frame, Label, Tk, messagebox, ttk  # Import the Tk class
from tkinter import Canvas, Entry, Text, Button, PhotoImage, Listbox, Scrollbar, Menubutton, Menu, filedialog
from PIL import Image, ImageTk
import socket
import json
userID = str(sys.argv[1])
OUTPUT_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ASSETS_PATH = os.path.join(OUTPUT_PATH, "GUI\\assets\\frame0")


        
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class Presentation:  
    def __init__(self):
        self.window = Tk()
        self.window.title("HarmonyHub")
        self.window.geometry("700x500")
        self.window.configure(bg="#FFFFFF")
        self.host_ip = '127.0.0.1'
        self.port = 6767
        
        self.window.after(1, self.start_client)
        
        self.canvas = Canvas(
                self.window,
                bg = "#FFFFFF",
                height = 500,
                width = 700,
                bd = 0,
                highlightthickness = 0,
                relief = "ridge"
            )
    
        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            208.0,
            437.0,
            fill="#2D2D2D",
            outline="")

        self.canvas.create_rectangle(
            208.0,
            0.0,
            700.0,
            437.0,
            fill="#787575",
            outline="")

        self.canvas.create_rectangle(
            0.0,
            437.0,
            700.0,
            500.0,
            fill="#FF9800",
            outline="")

        self.canvas.create_rectangle(
            208.0,
            408.0,
            700.0,
            437.0,
            fill="#313131",
            outline="")

        # Logo
        self.image_image_1 = PhotoImage(file=relative_to_assets("Hub.png"))
        self.image_1=self.canvas.create_image(
            15.0,
            12.0,  
            image = self.image_image_1
            )
        
        
        # Shuffle button
        self.button_image_2= PhotoImage(file=relative_to_assets("Shuffle.png"))
        self.button_2=Button(    
            image= self.button_image_2,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=30,
            width=40)
        self.button_2.place(
            x=125.0,
            y=470.0
        )
        
        # Repeat button
        self.button_image_5=PhotoImage(file=relative_to_assets("Repeat.png"))
        
        self.button_5=Button(
            image= self.button_image_5,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=15,
            width=40
            )
        self.button_5.place(
            x=75.0,
            y=477.0
        )
        
        # Adjust button
        self.button_image_8=PhotoImage(file=relative_to_assets("Adjust.png"))
        self.button_8=Button(
            image= self.button_image_8,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=30,
            width=40
            )
        self.button_8.place(
            x=367.0,
            y=470.0,
        )
        # Menu button
        self.button_image_9=PhotoImage(file=relative_to_assets("Menu.png"))
        self.button_9=Menubutton(
            image= self.button_image_9,
            borderwidth=0,
            relief="flat",
            bg="#313131",
            activebackground="#FF9900",
            height=20,
            width=40
            )
        self.button_9.place(
            x=660.0,
            y=413.0,
        )
        self.button_9.menu=Menu(self.button_9,tearoff = False)
        self.button_9["menu"]=self.button_9.menu
        self.button_9.menu.add_command(label="Select Folder")
        
        
        
        # Lego name
        self.canvas.create_text(
            25.0,
            5.0,
            anchor="nw",
            text="HarmonyHub",
            fill="#FFFFFF",
            font=("Inter ExtraBold", 12 * -1)
        )
        # Art holder
        frame = Frame(self.window)
        frame.place(x=19, y=46, width=170, height=190)  
        image_3=Image.open(relative_to_assets("MusicHub.png"))
        image_3=image_3.resize((170, 190))
        self.image_image_3=ImageTk.PhotoImage(image_3)
        label = Label (frame, image=self.image_image_3)
        label.pack()
        
        
        # Search icon
        self.image_image_2=PhotoImage(file=relative_to_assets("Search.png"))
        self.image_2=self.canvas.create_image(
            222.0,
            422.0,
            image=self.image_image_2
            )
        Search_field = Entry(self.window,bd=0, bg="#E8E8E8", font=("Helvetica", 12))
        Search_field.place(x=244, y=413, width=200, height=18)

        #Playlist frame
        self.big_frame = Frame(self.window,bg="#313131",relief="flat")
        self.big_frame.place(x=208.0, y=0.0, width=493.0, height=407.0)
        
        
        # Create the smaller frames and add them to the big frame
        self.frames = {}
        for F in (AlbumFrame, PlaylistFrame,PlaylistDetailFrame ,ArtistFrame,TrackFrame):
            frame = F(self.big_frame, self,self.host_ip,self.port)
            frame.configure(background='#313131')
            self.frames[F] = frame
            frame.place(x=0, y=0, width=665.0, height=568.0)
            album_label = Label(frame, bg="#313131",fg="#FFFFFF", text="Albums", font=("Inter", 16 * -1,"bold"))
            album_label.place(x=10, y=15 )
            album_label.bind("<Button-1>", lambda x: self.show_frame(AlbumFrame))
            
            artist_label = Label(frame, bg="#313131",fg="#FFFFFF", text="Artists", font=("Inter", 16 * -1,"bold"))
            artist_label.place(x=90, y=15 )
            artist_label.bind("<Button-1>", lambda x: self.show_frame(ArtistFrame))
            
            track_label = Label(frame, bg="#313131",fg="#FFFFFF", text="Tracks", font=("Inter", 16 * -1,"bold"))
            track_label.place(x=240, y=15 )
            track_label.bind("<Button-1>", lambda x: self.show_frame(TrackFrame))
            
            playlist_label = Label(frame, bg="#313131",fg="#FFFFFF", text="Playlist", font=("Inter", 16 * -1,"bold"))
            playlist_label.place(x=165, y=15 )
            playlist_label.bind("<Button-1>", lambda x: self.show_frame(PlaylistFrame))
            
        # Show the first frame
        self.show_frame(TrackFrame)  
        
    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()
    def run(self):
        self.window.resizable(False, False)
        self.window.mainloop()
    def run_client(self):
        self.client = ClientListener()
    def start_client(self):
        self.client_thread = threading.Thread(target=self.run_client)
        self.client_thread.start() 
        
        
class AlbumFrame(Frame):
    def __init__(self, parent, big_frame, host_ip, port):
        super().__init__(parent)
        self.host_ip = host_ip
        self.port = port
        self.pack(fill='both', expand=True)
 
        #Table
        self.album_table = ttk.Treeview(self, columns=("Album ID","Title", "Artist ID", "Genre", "Release Date"), show='headings')
        self.album_table.heading("Album ID", text="Album ID")
        self.album_table.heading("Title", text="Title")
        self.album_table.heading("Artist ID", text="Artist ID")
        self.album_table.heading("Genre", text="Genre")
        self.album_table.heading("Release Date", text="Release Date")
        

        self.album_table.column("Album ID", width=50, anchor='center')
        self.album_table.column("Title", width=50, anchor='center')
        self.album_table.column("Artist ID", width=50, anchor='center')
        self.album_table.column("Genre", width=50, anchor='center')
        self.album_table.column("Release Date", width=50, anchor='center')
    

        self.album_table.place(
            x=0,
            y=48,
            width=493.0,
            height=480.0
            )
        self.insert_into_table_album()
         
    def insert_into_table_album(self):
        rows = ClientListener.getDataAlbumFromServer(self)
        # If rows is a dictionary, convert it to a list of one dictionary
        if isinstance(rows, dict):
            rows = [rows]
        # Insert each row into the table
        if rows is not None:
            for row in rows:
        #     for value in row.values():
        #         print(value)
                values = tuple(row.values())
                self.album_table.insert('', 'end', values=values)

            
class PlaylistFrame(Frame):
    def __init__(self, parent, big_frame, host_ip, port):
        super().__init__(parent)
        self.pack(fill='both', expand=True)
        self.host_ip = host_ip
        self.port = port
        self.big_frame = big_frame
        self.add_playlist_button = Button(
            self,
            background="#4394AE",
            text="Add Playlist",
            font=("Inter Medium", 14 * -1,"bold"),
            fg="#FFFFFF",
            relief="flat",
            activebackground="#4394AE",
            activeforeground="#FFFFFF",
            command=lambda: ClientListener.addTrackToPlayList(self)
        )
        
        self.add_playlist_button.place(
            x=380.0,
            y=13.0,
            width=100.0,
            height=25.0,
        )
        #Table

        self.playlist_table = ttk.Treeview(self, columns=("Playlist ID","User ID" ,"Track ID", "Title","Creation Date"), show='headings')
        self.playlist_table.heading("Playlist ID", text="Playlist ID")
        self.playlist_table.heading("User ID", text="User ID")
        self.playlist_table.heading("Track ID", text="Track ID")
        self.playlist_table.heading("Title", text="Title")
        self.playlist_table.heading("Creation Date", text="Creation Date")
    

        self.playlist_table.column("Playlist ID", width=35, anchor='center')
        self.playlist_table.column("User ID", width=35, anchor='center')
        self.playlist_table.column("Track ID", width=35, anchor='center')
        self.playlist_table.column("Title", width=35, anchor='center')
        self.playlist_table.column("Creation Date", width=35, anchor='center')


        self.playlist_table.place(
            x=0,
            y=48,
            width=493.0,
            height=480.0
            )
        self.insert_into_table_playlist()
    def insert_into_table_playlist(self):

        rows = ClientListener.getDataPlayListFromServer(self,userID)
        # If rows is a dictionary, convert it to a list of one dictionary
        if isinstance(rows, dict):
            rows = [rows]
        # Insert each row into the table
        for row in rows:
            self.playlist_table.insert('', 'end', values=row)
class PlaylistDetailFrame(Frame):
    def __init__(self,parent,big_frame,host_ip,port):
        super().__init__(parent)
        self.pack(fill='both', expand=True)
        self.host_ip = host_ip
        self.port = port
        self.big_frame = big_frame
        self.delete_track_button = Button(
            self,
            background="#4394AE",
            text="Delete Track",
            font=("Inter Medium", 14 * -1,"bold"),
            fg="#FFFFFF",
            relief="flat",
            activebackground="#4394AE",
            activeforeground="#FFFFFF",
            command=lambda: ClientListener.deleteTrackInPlayList(self)
        )
        self.delete_track_button.place(
            x=380.0,
            y=13.0,
            width=100.0,
            height=25.0,
            )
            
class ArtistFrame(Frame):
    def __init__(self, parent, big_frame, host_ip, port):
        super().__init__(parent)
        self.pack(fill='both', expand=True)
        self.host_ip = host_ip
        self.port = port
        self.big_frame = big_frame
        
        #Table
        self.artist_table = ttk.Treeview(self, columns=("Artist ID","Name", "Genre"), show='headings')
        self.artist_table.heading("Artist ID", text="Artist ID")
        self.artist_table.heading("Name", text="Name")
        self.artist_table.heading("Genre", text="Genre")


        self.artist_table.column("Artist ID", width=30, anchor='center')
        self.artist_table.column("Name", width=30, anchor='center')
        self.artist_table.column("Genre", width=30, anchor='center')


        self.artist_table.place(
            x=0,
            y=48,
            width=493.0,
            height=480.0
            )
        # Bind the <<TreeviewSelect>> event to the Treeview
        self.artist_table.bind("<<TreeviewSelect>>", self.on_row_click)
        # Bind the double-click event to the Treeview
        self.artist_table.bind("<Double-1>", self.on_row_double_click)
        self.insert_into_table_artist()
        
    def insert_into_table_artist(self):
        rows = ClientListener.getDataArtistFromServer(self)
        
        # If rows is a dictionary, convert it to a list of one dictionary
        if isinstance(rows, dict):
            rows = [rows]

        # Insert each row into the table
        if rows is not None:
            for row in rows:
                values = tuple(row.values())
                self.artist_table.insert('', 'end', values=values)
    def on_row_click(self, event):
        # Get the selected row
        item = self.artist_table.selection()[0]

        # Get the values of the selected row
        values = self.artist_table.item(item, 'values')

        # Print the values of the selected row
        print(values)
    def on_row_double_click(self, event):
        # Get the selected row
        item = self.artist_table.selection()[0]

        # Get the values of the selected row
        values = self.artist_table.item(item, 'values')
        
        self.big_frame.show_frame(TrackFrame)
        track_frame = self.big_frame.frames[TrackFrame] 
        
        track_frame.insert_into_table_track_artist(values[0])
class TrackFrame(Frame):
    def __init__(self, parent, big_frame, host_ip, port):
        super().__init__(parent)
        self.pack(fill='both', expand=True)
        self.host_ip = host_ip
        self.port = port
        self.big_frame = big_frame
        self.client= ClientListener()
        self.current_track_id = None
        self.add_track_button = Button(
            self,
            background="#4394AE",
            text="To Playlist",
            font=("Inter Medium", 14 * -1,"bold"),
            fg="#FFFFFF",
            relief="flat",
            activebackground="#4394AE",
            activeforeground="#FFFFFF",
            command=lambda: ClientListener.addTrackToPlayList(self,userID,self.current_track_id)
        )
        self.add_track_button.place(
            x=380.0,
            y=13.0,
            width=100.0,
            height=25.0,
            )
        self.image_refresh = PhotoImage(file=relative_to_assets("Reset.png"))
        self.refresh_button = Button(
            self,
            background="#313131",
            image=self.image_refresh,
            text="Refresh",
            font=("Inter Medium", 14 * -1,"bold"),
            fg="#FFFFFF",
            relief="flat",
            activebackground="#313131",
            activeforeground="#FFFFFF",
            command=lambda: self.insert_into_table_track()
        )
        self.refresh_button.place(
            x=340.0,
            y=13.0,
            width=27.0,
            height=27.0,
            )
        # Stop button
        self.button_image_6= PhotoImage(file=relative_to_assets("End.png"))
        self.button_6=Button(
            image=self.button_image_6,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=35,
            width=46,
            command=lambda: self.select_next_row()
            )
        self.button_6.place(
            x=178.0,
            y=443.0,
        )
        # skip to start button
        self.button_image_3= PhotoImage(file=relative_to_assets("Skip to Start.png"))
        self.button_3=Button(
            image=self.button_image_3,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=35,
            width=46,
            command=lambda: self.select_previous_row()
            )
        self.button_3.place(
            x=22.0,
            y=443.0
        )
        # Play button
        self.button_image_4=PhotoImage(file=relative_to_assets("Circled Play.png"))
        
        self.button_4=Button(
            image=self.button_image_4,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=30,
            width=46,
            command=lambda: self.play_song()
            )
        self.button_4.place(
            x=72.0,
            y=446.0
        )
        #Hello
        self.label_1 = Label(
            text="Hello",
            bg="#2D2D2D",
            fg="#FFFFFF",
            font=("Inter", 16 * -1,"bold")
        )
        self.label_1.place(
            x=10.0,
            y=410.0
        )
        self.label_2 = Label(
            text=self.client.getUserNameByUserID(userID),
            bg="#2D2D2D",
            fg="#FFFFFF",
            font=("Inter", 16 * -1,"bold")
        )
        self.label_2.place(
            x=60.0,
            y=410.0
        )
        # Pause button
        self.button_image_1=PhotoImage(file=relative_to_assets("Pause Button.png"))

        self.button_1=Button(
            image=self.button_image_1,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=35,
            width=46,
            command=self.client.getUserNameByUserID(userID)
        )
        self.button_1.place(
            x=123,
            y=442
        )
        # Audio icon
        self.button_image_7= PhotoImage(file=relative_to_assets("Audio.png"))
        self.button_7=Button(
            image= self.button_image_7,
            borderwidth=0,
            relief="flat",
            bg="#FF9900",
            activebackground="#FF9900",
            height=30,
            width=40,
            command=lambda: self.client.mute_volume())
        self.button_7.place(
            x=235.0,
            y=470.0
        )
        #volume slider
        style = ttk.Style()
        style.configure("TScale", background="#FF9900")
        self.volume_slider = ttk.Scale( from_=0, to=100, orient='horizontal',state="TScale", command=lambda val :self.set_volume(val))
        self.volume_slider.set(50)
        self.volume_slider.place(
            x=270.0,
            y=479.0,
            width=100.0,
            height=15.0
        )
        #Table

        self.track_table = ttk.Treeview(self, columns=("Track ID","Title","Artist ID" ,"Album ID", "Duration","Release Date"), show='headings')
        self.track_table.heading("Track ID", text="Track ID")
        self.track_table.heading("Title", text="Title")
        self.track_table.heading("Artist ID", text="Artist ID")
        self.track_table.heading("Album ID", text="Album ID")
        self.track_table.heading("Duration", text="Duration")
        self.track_table.heading("Release Date", text="Release Date")
    

        self.track_table.column("Track ID", width=35, anchor='center')
        self.track_table.column("Title", width=35, anchor='center')
        self.track_table.column("Artist ID", width=35, anchor='center')
        self.track_table.column("Album ID", width=35, anchor='center')
        self.track_table.column("Duration", width=35, anchor='center')
        self.track_table.column("Release Date", width=35, anchor='center')

     
        self.track_table.place(
            x=0,
            y=48,
            width=493.0,
            height=480.0
            )
        self.track_table.bind("<<TreeviewSelect>>", self.on_row_click)
        self.track_table.bind("<Double-1>", self.on_row_double_click)
        self.insert_into_table_track()
    def play_song(self):
        # Get the selected items
        selected_items = self.track_table.selection()
        # Check if any items are selected
        if selected_items:
            # Get the first selected item
            item = selected_items[0]

            # Get the values of the selected item
            values = self.track_table.item(item, 'values')
            self.client.sendNameOfSongAndPlay(values[0])
    def set_volume(self,val):
        volume = float(val)/100
        self.client.set_volume(volume)
    def on_row_click(self, event):
        # Get the selected items
        selected_items = self.track_table.selection()
        # Check if any items are selected
        if selected_items:
            # Get the first selected item
            item = selected_items[0]

            # Get the values of the selected item
            values = self.track_table.item(item, 'values')
   
            self.current_track_id = values[0]
    def on_row_double_click(self, event):
        # Get the selected row
        item = self.track_table.selection()[0]

        # Get the values of the selected row
        values = self.track_table.item(item, 'values')
        
        self.client.sendNameOfSongAndPlay(values[0])
    def select_next_row(self):
       # Get the selected item
        selected = self.track_table.selection()

        # If no row is selected, select the first one
        if not selected:
            next_item = self.track_table.get_children()[0]
        else:
            # Get the index of the current selected item
            cur_index = self.track_table.index(selected[0])

            # Get the total number of items
            total_items = len(self.track_table.get_children())

            # If the current selected item is the last one, select the first one
            if cur_index == total_items - 1:
                next_item = self.track_table.get_children()[0]
            else:
                # Otherwise, select the next item
                next_item = self.track_table.get_children()[cur_index + 1]

        self.track_table.selection_set(next_item)
        self.track_table.focus(next_item)
        values = self.track_table.item(next_item, 'values')
        self.client.sendNameOfSongAndPlay(values[0])

    def insert_into_table_track(self):
        # Delete all rows from the table
        for i in self.track_table.get_children():
            self.track_table.delete(i)
        rows = ClientListener.getDataTrackFromServer(self)
     
        # If rows is a dictionary, convert it to a list of one dictionary
        if isinstance(rows, dict):
            rows = [rows]

        # Insert each row into the table
        if rows is not None:
            for row in rows:
                values = tuple(row.values())
                self.track_table.insert('', 'end', values=values)
    def select_previous_row(self):
        # Get the selected item
        selected = self.track_table.selection()

        # If no row is selected, select the last one
        if not selected:
            previous_item = self.track_table.get_children()[-1]
        else:
            # Get the index of the current selected item
            cur_index = self.track_table.index(selected[0])

            # If the current selected item is the first one, select the last one
            if cur_index == 0:
                previous_item = self.track_table.get_children()[-1]
            else:
                # Otherwise, select the previous item
                previous_item = self.track_table.get_children()[cur_index - 1]

        self.track_table.selection_set(previous_item)
        self.track_table.focus(previous_item)
        values = self.track_table.item(previous_item, 'values')
        self.client.sendNameOfSongAndPlay(values[0])    
    def insert_into_table_track_artist(self,artistID) :
        # Delete all rows from the table
        for i in self.track_table.get_children():
            self.track_table.delete(i)
        rows = ClientListener.getDataTrackFromServer(self)

        # If rows is a dictionary, convert it to a list of one dictionary
        if isinstance(rows, dict):
            rows = [rows]

        # Filter the rows based on the artist ID
        rows = [row for row in rows if row['artistID'] == artistID]

        # Insert each row into the table
        if rows is not None:
            for row in rows:
                values = tuple(row.values())
                self.track_table.insert('', 'end', values=values)
if __name__ == "__main__":
    app = Presentation()
    app.run()
   